#!/bin/sh

#===========================
#FOR:BUILD
#===========================

require_package contextfiles

#===========================
#FOR:RUN
#===========================

USER_DATA="/tmp/user-data" 
CONTEXT_TIMEOUT=10

dmesg | cat > dmesg.txt

for PROVIDER in /etc/ucernvm-context/provider.d/*; do

   . "$PROVIDER"

   PROVIDER=${PROVIDER##*/}

   echo -n "Checking for $PROVIDER..."

   if ${PROVIDER}_detect; then
      echo "yes"
	  echo $PROVIDER | cat > /tmp/cloud-provider
      ${PROVIDER}_download ${USER_DATA}
      ${PROVIDER}_cleanup
      break
   else
      echo "no"
      ${PROVIDER}_cleanup
   fi
done

if [ ! -s /tmp/cloud-provider ]
then
	echo "nocloud-net" | cat > /tmp/cloud-provider
fi

UCONTEXT_SRC=$(cat /tmp/cloud-provider)

file /tmp/user-data* | grep "compressed" | cat > com.txt

if [ -s com.txt ]
then
        gzip -d /tmp/user-data* 
else
        echo "File not compressed"
fi

rm com.txt

rm dmesg.txt

if [ -s ${USER_DATA} ]
then
	#Check if the User Data are base 64 encoded. If yes, decode.

	grep "MIME-Version" $USER_DATA | cat > testnew64

	if [ -s testnew64 ]
	then
		echo "User Data in New Syntax and not base64 encoded"
		rm testnew64
	else
		grep "ucernvm" $USER_DATA | cat > test64
		if [ ! -s test64 ]
		then
			grep "amiconfig" $USER_DATA | cat > test64
		fi
		if [ ! -s test64 ]
		then
		        grep "cloud-config" $USER_DATA | cat > test64
		fi
		if [ ! -s test64 ]
		then
		        grep "#\!/bin" $USER_DATA | cat > test64
		fi

		if [ ! -s test64 ]
		then
			echo "Input could be base64 encoded"
			echo "Decoding user-data..."
			base64 -d $USER_DATA | cat > new-user-data
			if [ -s new-user-data ] 
			then
				echo "Data decoded successfully"
				cp new-user-data $USER_DATA
				rm new-user-data
			else
				echo "Error in decoding data"
			fi
		else
			echo "User-Data in Old Syntax and not base64 encoded"
		fi
		rm test64
	fi

	#Parse User Data

	#!/bin/sh

	grep "MIME" ${USER_DATA} | cat > mimetest.txt

	#We create temporary copy of user-data file
	cp ${USER_DATA} ud

	if [ -s mimetest.txt ]
	then
		echo "New Syntax Found"
		sed -n '/^Content-Type: text\/ucernvm; charset="us-ascii"$/,/^MIME-Version: 1.0$/p' ud | sed '1,4d' | tac | sed '1,2d' | tac | cat > /tmp/ucernvm-data
		#Leaving the uncompressed data as it is in /tmp/user-data
	
		#Removing temporary user-data
		rm ud
	else
		echo "Old Syntax Found"
		#Extracting portion of ucernvm data
		sed -n '/^\[ucernvm-begin\]$/,/^\[ucernvm-end\]$/p' ud | sed -e '1d' -e '$d' | cat > /tmp/ucernvm-data

		#Generating a cloud-init compatible MIME-Multipart

		#Since the source our mime file will always be cernvm the boundary value and the header
		#in mime could be statically generated to avoid any additional dependencies or use of python
		#These static files are stored in the mime-files folder

		cp /etc/ucernvm-context/mime-files/main-mime-header mime-user-data

		#STARTUP SCRIPT SECTION
		sed -n '/^#!\/bin\/sh$/,/^\[ucernvm-begin\]\|\[amiconfig\]\|#cloud-config$/p' ud | sed -e '$d' >> /tmp/startup-script
		if [ -s /tmp/startup-script ]
		then
			echo "--===============1341993424==" >> mime-user-data
		        cat /etc/ucernvm-context/mime-files/startup-script-mime-header >> mime-user-data
		        cat /tmp/startup-script >> mime-user-data
		fi
		rm /tmp/startup-script

		#UCERNVM SECTION
		if [ -s /tmp/ucernvm-data ]
		then
			echo "--===============1341993424==" >> mime-user-data
			cat /etc/ucernvm-context/mime-files/ucernvm-mime-header >> mime-user-data
			cat /tmp/ucernvm-data >> mime-user-data
		fi

		#AMICONFIG SECTION
		sed -n '/^\[amiconfig\]$/,/^#cloud-config\|\[ucernvm-begin\]$/p' ud | sed -e '$d' >> /tmp/amiconfig-data
		if [ -s /tmp/amiconfig-data ]
		then
			echo "--===============1341993424==" >> mime-user-data
			cat /etc/ucernvm-context/mime-files/amiconfig-mime-header >> mime-user-data
			cat /tmp/amiconfig-data >> mime-user-data
		fi
		rm /tmp/amiconfig-data

		#CLOUD-CONFIG SECTION
		sed -n '/^#cloud-config$/,/^\[amiconfig\]\|\[ucernvm-begin\]$/p' ud | sed -e '$d' >> /tmp/cloud-config-data
		if [ -s /tmp/cloud-config-data ]
		then
			echo "--===============1341993424==" >> mime-user-data
			cat /etc/ucernvm-context/mime-files/cloud-config-mime-header >> mime-user-data
			cat /tmp/cloud-config-data >> mime-user-data
		fi
		rm /tmp/cloud-config-data

		#ENDING BOUNDARY
		echo "--===============1341993424==--" >> mime-user-data

		#Removing temporary user-data file
		rm ud

		#Saving new cloud-init MIME-compatible user-data
		\cp mime-user-data /tmp/user-data
	
		#Removing the generated mime-user-data file
		#since it is already copied to /tmp/user-data
		rm mime-user-data
	
	fi

	# Extract key values

	#!/bin/sh

	UCONTEXT_TMP="/tmp/ucontext"
	touch ${UCONTEXT_TMP}

	while read line
	do
		#Displaying key-value pairs on STD_OUT
		#Added an intermediate grep to prevent displaying any input in invalid key=value format

		echo "${line}" | grep "=" |  awk -F'[=]' '{print "_UCONTEXT_" $1 "=" $2}' >> ${UCONTEXT_TMP}

	done < /tmp/ucernvm-data
	cat ${UCONTEXT_TMP}
	echo "Extracted key value pairs"
	. ${UCONTEXT_TMP}
else
	echo "No user data found"
fi

